tests:
  - name: "Notebook Instance create tests"
    description: "Part of Notebook Instance CRUD tests."
    scenarios:
     - name: "Create=InvalidInput"
       description: "Given one of the parameters is invalid, ko.Status shows a terminal condition"
       given:
         desired_state: "notebook_instance/v1alpha1/input/nb_invalid_before_create.yaml"
         svc_api:
           - operation: CreateNotebookInstanceWithContext
             error:
               code: InvalidParameterValue
               message: "The notebook instance name must start with an alphanumeric character."
       invoke: Create
       expect:
         latest_state: "notebook_instance/v1alpha1/output/nb_invalid_after_create.yaml"
         error: resource is in terminal condition
     - name: "Create=Valid"
       description: "Testing a successful create call"
       given:
         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
         svc_api:
           - operation: CreateNotebookInstanceWithContext
             output_fixture: "notebook_instance/create/nb_create_resp.json"
       invoke: Create
       expect:
         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
  # - name: "Notebook Instance readOne tests"
  #   description: "Testing the readOne operation"
  #   scenarios:
  #     - name: "ReadOne=InServiceNoUpdate"
  #       description: "Testing readOne to see if it will retain the conditions"
  #       given:
  #         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
  #         svc_api:
  #          - operation: CreateNotebookInstanceWithContext
  #            output_fixture: "notebook_instance/create/nb_create_resp.json"
  #       invoke: ReadOne
  #       expect:
  #         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
      
  #     - name: "ReadOne=AfterUpdateStop"
  #       description: "Testing to see if the NotebookInstance will keep the Notebook in stopped after updating"
  #       given:
  #         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
  #         svc_api:
  #          - operation: CreateNotebookInstanceWithContext
  #            output_fixture: "notebook_instance/create/nb_create_resp.json"
  #       invoke: ReadOne
  #       expect:
  #         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
  #     - name: "ReadOne=AfterUpdateStart"
  #       description: "Testing to see if the NotebookInstance will start the Notebook after updating"
  #       given:
  #         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
  #         svc_api:
  #          - operation: CreateNotebookInstanceWithContext
  #            output_fixture: "notebook_instance/create/nb_create_resp.json"
  #       invoke: ReadOne
  #       expect:
  #         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
  #     - name: "ReadOne=AfterUpdateUpdating"
  #       description: "Testing to see if the NotebookInstance will retain conditions when updating"
  #       given:
  #         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
  #         svc_api:
  #          - operation: CreateNotebookInstanceWithContext
  #            output_fixture: "notebook_instance/create/nb_create_resp.json"
  #       invoke: ReadOne
  #       expect:
  #         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
  # - name: "Notebook Instance update tests"
  #   description: "Testing the Update functionality of the Notebook Instance"
  #   scenarios:
  #     - name: "Update=InvalidInput"
  #     - name: "Update=InService"
  #     - name: "Update=Pending"
  #     - name: "Update=Stopping"
  - name: "Notebook Instance delete tests"
    description: "Tests that test the delete operation"
    scenarios:
      - name: "Delete=IS"
        description: "This test checks if the Notebook stops before deleting."
        given:
          desired_state: "notebook_instance/v1alpha1/input/nb_delete_IS_input.yaml"
          svc_api:
            - operation: StopNotebookInstance
        invoke: Delete
        expect:
          error: "NotebookInstance is stopping."
      - name: "Delete=Deleting"
        description: "This test checks if the Notebook requeues while deleting"
        given:
          desired_state: "notebook_instance/v1alpha1/input/nb_delete_deleting_input.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Deleting state cannot be modified or deleted."
      - name: "Delete=Pending"
        description: "This test checks if the Notebook requeues while in pending state"
        given:
          desired_state: "notebook_instance/v1alpha1/input/nb_delete_pending_input.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Pending state cannot be modified or deleted."
      - name: "Delete=Stopping"
        description: "This test checks if the Notebook requeues while stopping"
        given:
          desired_state: "notebook_instance/v1alpha1/input/nb_delete_stopping_input.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Stopping state cannot be modified or deleted."
      - name: "Delete=Updating"
        description: "This test checks if the Notebook requeues while updating"
        given:
          desired_state: "notebook_instance/v1alpha1/input/nb_delete_updating_input.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Updating state cannot be modified or deleted."
      # - name: "Delete=Stopped"
      #   description: "This test checks if the Notebook reques right after making the delete call."
      #   given:
      #     desired_state: "notebook_instance/v1alpha1/input/nb_delete_stopped_input.yaml"
      #     svc_api:
      #       - operation: DeleteNotebookInstanceWithContext
      #       - operation: DescribeNotebookInstanceWithContext
      #   invoke: Delete
      #   expect:
      #     error: "NotebookInstance is deleting."
      #     output_fixture: "notebook_instance/create/nb_create_resp.json"
      
      # - name: "Delete=Completely Deleted"
      #   description: "This test checks if the Notebook completely deletes"
      #   given:
      #     desired_state: "notebook_instance/v1alpha1/input/nb_delete_stopped_input.yaml"
      #     svc_api:
      #       - operation: DeleteNotebookInstanceWithContext
      #       - operation: DescribeNotebookInstanceWithContext
      #   invoke: Delete
      #   expect:
      #     error: "NotebookInstance is deleting."
      #     output_fixture: "notebook_instance/create/nb_create_resp.json"
      
      #TODO: Add tests for failed delete and failed stop

      


