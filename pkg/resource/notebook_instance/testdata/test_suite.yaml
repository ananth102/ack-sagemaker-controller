tests:
  - name: "Notebook Instance create tests"
    description: "Part of Notebook Instance CRUD tests."
    scenarios:
     - name: "Create=InvalidInput"
       description: "Given one of the parameters is invalid, ko.Status shows a terminal condition"
       given:
         desired_state: "notebook_instance/v1alpha1/input/nb_invalid_before_create.yaml"
         svc_api:
           - operation: CreateNotebookInstanceWithContext
             error:
               code: InvalidParameterValue
               message: "The notebook instance name must start with an alphanumeric character."
       invoke: Create
       expect:
         latest_state: "notebook_instance/v1alpha1/output/nb_invalid_after_create.yaml"
         error: resource is in terminal condition
     - name: "Create=Valid"
       description: "Testing a successful create call"
       given:
         desired_state: "notebook_instance/v1alpha1/input/nb_success_before_create.yaml"
         svc_api:
           - operation: CreateNotebookInstanceWithContext
             output_fixture: "notebook_instance/create/create_success.json"
       invoke: Create
       expect:
         latest_state: "notebook_instance/v1alpha1/output/nb_success_after_create.yaml"
  - name: "Notebook Instance readOne tests"
    description: "Testing the readOne operation"
    scenarios:
       - name: "ReadOne=AfterCreate"
         description: "Testing readOne right after create"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_pending_after_create.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_pending_after_create.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_pending_after_create.yaml"
       - name: "ReadOne=Deleting"
         description: "Testing readOne when deleting"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_deleting.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_deleting.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_deleting.yaml"
       - name: "ReadOne=Fail"
         description: "Testing readOne when Describe fails"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_fail.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               error:
                code: ServiceUnavailable
                message: "Server is down"
         invoke: ReadOne
         expect:
           error: "ServiceUnavailable: Server is down\n\tstatus code: 0, request id: "
       - name: "ReadOne=FailedState"
         description: "Testing how readone handles the Failed State, it should have a failure reason."
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_failed_state.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_failed_state.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_failed_state.yaml"
       - name: "ReadOne=InService"
         description: "Testing how readone handles the InService state"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_InService.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_InService.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_InService.yaml"
       - name: "ReadOne=StoppedAfterUpdateACK"
         description: "Testing how readone handles the Stopped state when stopped by ack for update"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_stopped_after_update_ack.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_stopped_after_update_ack.json"
             - operation: StartNotebookInstance
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_stopped_after_update.yaml"
       - name: "ReadOne=StoppedAfterUpdateHuman"
         description: "Testing how readone handles the Stopped state when stopped by human for update"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_stopped_after_update_human.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_stopped_after_update_ack.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_stopped_after_update.yaml"
       - name: "ReadOne=StoppedBeforeUpdateACK"
         description: "Testing how readone handles the Stopped state when it's stopped right before an update."
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_stopped_before_update_ack.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_stopped_before_update_ack.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_stopped_before_update_ack.yaml"
       - name: "ReadOne=StoppingDeleting"
         description: "Testing how readone handles the Stopping stopping state before going into deleting"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_stopping_deleting.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_stopping_deleting.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_stopping_deleting.yaml"
       - name: "ReadOne=StoppedUpdate"
         description: "Testing how readone handles the Stopping stopping state before going into Update"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_stopping_update.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_stopping_update.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_stopping_update.yaml"
       - name: "ReadOne=UpdatingUser"
         description: "Testing how readone handles the Updating status when a user stops the Notebook"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_updating_by_user.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_updating_by_user.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_updating_by_user.yaml"
       - name: "ReadOne=UpdatingUser"
         description: "Testing how readone handles the Updating status when ack stops the Notebook"
         given: 
           desired_state: "notebook_instance/v1alpha1/input/readone/nb_readone_updating.yaml"
           svc_api:
             - operation: DescribeNotebookInstanceWithContext
               output_fixture: "notebook_instance/readOne/readone_updating.json"
         invoke: ReadOne
         expect:
           latest_state: "notebook_instance/v1alpha1/output/readone/nb_readone_updating.yaml"
           
  - name: "Notebook Instance update tests"
    description: "Testing the Update functionality of the Notebook Instance"
    scenarios:
      - name: "Update=Pending"
        description: "This test checks if the Notebook requeues while in pending state"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_pending_input.yaml"
        invoke: Update
        expect:
          error: "NotebookInstance in Pending state cannot be modified or deleted."
      - name: "Update=Stopping"
        description: "This test checks if the Notebook requeues while in stopping state"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_stopping_input.yaml"
        invoke: Update
        expect:
          error: "NotebookInstance in Stopping state cannot be modified or deleted."
      - name: "Update=Updating"
        description: "This test checks if the Notebook requeues while in updating state"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_updating_input.yaml"
        invoke: Update
        expect:
          error: "NotebookInstance in Updating state cannot be modified or deleted."
      - name: "Update=InService"
        description: "This test checks if the controller stops the Notebook"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_inservice_input.yaml"
          svc_api:
            - operation: StopNotebookInstance
        invoke: Update
        expect:
          latest_state: "notebook_instance/v1alpha1/output/nb_update_InService_output.yaml"
          error: "NotebookInstance is stopping."
      - name: "Update=Stopped--ByController"
        description: "This test checks if the controller updates and sets the StoppedByControllerMetadata status"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_stopped_controller_input.yaml"
          svc_api:
            - operation: UpdateNotebookInstanceWithContext 
        invoke: Update
        expect:
          latest_state: "notebook_instance/v1alpha1/output/nb_update_stopped_controller_output.yaml"
      - name: "Update=Stopped--ByController"
        description: "This test checks if the controller updates and does not set the StoppedByControllerMetadata status"
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_common.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_stopped_by_user_input.yaml"
          svc_api:
            - operation: UpdateNotebookInstanceWithContext 
        invoke: Update
        expect:
          latest_state: "notebook_instance/v1alpha1/output/nb_update_stopped_by_user.yaml"
      - name: "Update=InvalidInput"
        description: "This test checks if invalid input has been entered in the input."
        given:
          desired_state: "notebook_instance/v1alpha1/input/update/nb_update_desired_invalid.yaml"
          latest_state: "notebook_instance/v1alpha1/input/update/nb_update_latest_stopped_by_user_input.yaml"
          svc_api:
            - operation: UpdateNotebookInstanceWithContext
              error:
                code: ValidationException
                message: "VolumeInSizeGB cannot be lower than current."
        invoke: Update
        expect:
          latest_state: "notebook_instance/v1alpha1/output/nb_update_invalid.yaml"
  #TODO: Add tests for Stop errors once unit test supports that.

  - name: "Notebook Instance delete tests"
    description: "Tests that test the delete operation"
    scenarios:
      - name: "Delete=IS"
        description: "This test checks if the Notebook stops before deleting."
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_IS.yaml"
          svc_api:
            - operation: StopNotebookInstance
        invoke: Delete
        expect:
          error: "NotebookInstance is stopping."
      - name: "Delete=Deleting"
        description: "This test checks if the Notebook requeues while deleting"
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_deleting.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Deleting state cannot be modified or deleted."
      - name: "Delete=Pending"
        description: "This test checks if the Notebook requeues while in pending state"
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_pending.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Pending state cannot be modified or deleted."
      - name: "Delete=Stopping"
        description: "This test checks if the Notebook requeues while stopping"
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_stopping.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Stopping state cannot be modified or deleted."
      - name: "Delete=Updating"
        description: "This test checks if the Notebook requeues while updating"
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_updating.yaml"
        invoke: Delete
        expect:
          error: "NotebookInstance in Updating state cannot be modified or deleted."
      - name: "Delete=Stopped"
        description: "This test checks if the Notebook requeues right after making the delete call."
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_stopped.yaml"
          svc_api:
            - operation: DeleteNotebookInstanceWithContext
            - operation: DescribeNotebookInstanceWithContext
              output_fixture: "notebook_instance/readOne/delete_resp.json"
        invoke: Delete
        expect:
          error: "NotebookInstance is deleting."
      - name: "Delete=Fail"
        description: "This test checks if the Notebook returns an error if delete fails"
        given:
          desired_state: "notebook_instance/v1alpha1/input/delete/nb_delete_stopped.yaml"
          svc_api:
            - operation: DeleteNotebookInstanceWithContext
              error:
                code: ServiceUnavailable
                message: "Server is down"
        invoke: Delete
        expect:
          error: "ServiceUnavailable: Server is down\n\tstatus code: 0, request id: "
          
      #TODO: Add tests for failed stop and complete deletion(once unit test supports that)

      


